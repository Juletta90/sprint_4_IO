# Поиск в отсортированном массиве даёт очевидную выгоду по сравнению с несортированным:
# даже если нужного значения нет в массиве, нет нужды перебирать весь массив до конца,
# нужно лишь проверить, что его нет в определённом диапазоне.

# Функция check_element_in_list() выполняет линейный поиск по любому массиву:
# и по несортированному, и по сортированному. Поэкспериментируйте с кодом:
# поменяйте аргументы в вызове функции, проверьте её работу на отсортированном и несортированном списках.

def check_element_in_list(desired_element, ordered_list):
    """Проверяет наличие искомого элемента в отсортированном списке."""
    for item in ordered_list:
        if item == desired_element:
            return f'Элемент {desired_element} найден в массиве!'
    return f'Элемент {desired_element} не найден в массиве.'


# Вызываем функцию с тестовыми данными.
# Первый аргумент - целое число.
# Второй аргумент - отсортированный по возрастанию список целых чисел.
result = check_element_in_list(11, [1, 3, 5, 7, 10])
# Распечатываем результат.
print(result)

#________________________________________________________________________

# Настройте эту функцию для работы только с отсортированными массивами — и это
# позволит сделать её эффективнее. Дополните код функции проверками:
# Если проверяемый элемент массива меньше искомого,
# то функция должна перейти к проверке следующего элемента.
# Если текущий элемент больше искомого, нужно остановить проверку
# и вернуть сообщение Элемент [искомое_значение] не найден в массиве.


def check_element_in_unsorted_list(desired_element, ordered_list):
    """Проверяет наличие искомого элемента в неотсортированном списке."""
    for item in ordered_list:
        if item < desired_element:
            continue
        if item == desired_element:
            return f'Элемент {desired_element} найден в массиве!'
        elif item > desired_element:
            return f'Элемент {desired_element} не найден в массиве.'
        break
    return f'Элемент {desired_element} не найден в массиве.'


# Вызываем функцию с тестовыми данными.
# Первый аргумент - целое число.
# Второй аргумент - отсортированный по возрастанию список целых чисел.
result = check_element_in_unsorted_list(2, [1, 77, 14, 2, 57])
# Распечатываем результат.
print(result)


# Код с дополнительными проверками будет работать эффективнее исходного во всех
# случаях, кроме худших, — ведь поиск будет остановлен, как только встретится элемент больше искомого,
# и все остальные элементы отсортированного массива не придётся проверять.
# Но в худшем случае (например, если все элементы меньше искомого) потребуется перебрать весь массив.

